{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/components/card.js","webpack://mesto-project-ff/./src/scripts/components/modal.js","webpack://mesto-project-ff/./src/scripts/components/validation.js","webpack://mesto-project-ff/./src/scripts/components/api.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["// Функция создания карточки\r\nexport function createCard(cardTemplate, cardData, userId, handlers) {\r\n    const cardElement = cardTemplate.querySelector('.card').cloneNode(true); // карточка\r\n    const cardImage = cardElement.querySelector('.card__image'); // картинка\r\n    const buttonLike = cardElement.querySelector('.card__like-button');  // кнопка лайка\r\n    const likeCounter = cardElement.querySelector('.card__like-counter'); // строка с числом лайков\r\n    const deleteButton = cardElement.querySelector('.card__delete-button'); // кнопка удаления\r\n    const cardTitle = cardElement.querySelector('.card__title');\r\n\r\n    // Заполнение карточки\r\n    cardImage.src = cardData.link;\r\n    cardImage.alt = cardData.name;\r\n    cardTitle.textContent = cardData.name;\r\n    likeCounter.textContent = cardData.likes.length;\r\n\r\n    // Если лайк мой - закрасить сердечко\r\n    if (cardData.likes.some(user => user._id === userId)) {\r\n        buttonLike.classList.add('card__like-button_is-active');\r\n    }\r\n\r\n    // Если карточка чужая - убрать кнопку удаления\r\n    if (cardData.owner._id !== userId) {\r\n        deleteButton.remove();\r\n    }\r\n\r\n    // Обработчик кнопки лайка\r\n    buttonLike.addEventListener('click', () => \r\n        handleLikeButton(cardData._id, buttonLike, likeCounter, handlers.onLike)\r\n    );\r\n\r\n    // Обработчик кнопки удаления карточки\r\n    if (deleteButton) {\r\n        deleteButton.addEventListener('click', () =>\r\n            handlers.onAskDelete(cardData._id, cardElement) \r\n        );\r\n    }\r\n\r\n    // Обработчик клика по изображению\r\n    cardImage.addEventListener('click', () => \r\n        handlers.onPreview(cardData.link, cardData.name)\r\n    );\r\n\r\n    return cardElement;\r\n};\r\n\r\n// Функция обработки кнопки лайка\r\nfunction handleLikeButton(cardId, buttonLike, likeCounter, onLike) {\r\n    const isLikedNow = buttonLike.classList.contains('card__like-button_is-active');\r\n\r\n    // Вызываем колбэк, который пришел из index.js\r\n    onLike(cardId, isLikedNow)\r\n        .then(newCard => {\r\n            // Обновление UI после ответа сервера\r\n            buttonLike.classList.toggle('card__like-button_is-active');\r\n            likeCounter.textContent = newCard.likes.length;\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\n// Функция удаления карточки\r\nexport function deleteCard(cardId, cardElement, onDelete) {\r\n    // Вызываем колбэк, который пришел из index.js.\r\n    return onDelete(cardId)\r\n        .then(() => cardElement.remove());\r\n};","// Функция открытия модального окна\r\nexport function openPopup(modal) {\r\n    // Окно открывается\r\n    modal.classList.add('popup_is-opened');\r\n\r\n    // Добавим обработчик закрытия по Esc\r\n    document.addEventListener('keydown', handleEscClose);\r\n}\r\n\r\n// Функция закрытия модального окна\r\nexport function closePopup(popup) {\r\n    popup.classList.remove('popup_is-opened');\r\n    // Удаляем обработчик на Esc\r\n    document.removeEventListener('keydown', handleEscClose);\r\n}\r\n\r\n// Функция для закрытия окна по нажатию Esc\r\nfunction handleEscClose(evt) {\r\n    if (evt.key === 'Escape') {\r\n        const openedPopup = document.querySelector('.popup_is-opened');\r\n        if (openedPopup) {\r\n            closePopup(openedPopup);\r\n        }\r\n    }\r\n}\r\n\r\nexport function handleOverlayClick(evt) {\r\n    if (!evt.target.closest('.popup__content')) {\r\n        closePopup(evt.currentTarget);\r\n    }\r\n}","export function enableValidation(validationConfig) {\r\n    const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));\r\n\r\n    formList.forEach((formElement) => {\r\n        setEventLicteners(formElement, validationConfig);\r\n    });\r\n}\r\n\r\nexport function clearValidation(formElement, validationConfig) {\r\n    const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n    inputList.forEach((inputElement) => {\r\n        inputElement.setCustomValidity(\"\");\r\n\r\n        hideInputError(formElement, inputElement, validationConfig);\r\n    });\r\n\r\n    toggleButtonState(inputList, buttonElement, validationConfig);\r\n}\r\n\r\nfunction setEventLicteners(formElement, validationConfig) {\r\n    const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n    toggleButtonState(inputList, buttonElement, validationConfig);\r\n\r\n    inputList.forEach((inputElement) => {\r\n        inputElement.addEventListener('input', () => {\r\n            isValid(formElement, inputElement, validationConfig);\r\n\r\n            toggleButtonState(inputList, buttonElement, validationConfig);\r\n        });\r\n    });\r\n}\r\n\r\nfunction showInputError(formElement, inputElement, errorMessage, validationConfig) {\r\n    const errorElement = formElement.querySelector(`#${inputElement.id}-error`);\r\n    \r\n    inputElement.classList.add(validationConfig.inputErrorClass);\r\n    errorElement.textContent = errorMessage;\r\n    errorElement.classList.add(validationConfig.errorClass);\r\n}\r\n\r\nfunction hideInputError(formElement, inputElement, validationConfig) {\r\n    const errorElement = formElement.querySelector(`#${inputElement.id}-error`);\r\n\r\n    inputElement.classList.remove(validationConfig.inputErrorClass);\r\n    errorElement.classList.remove(validationConfig.errorClass);\r\n    errorElement.textContent = '';\r\n}\r\n\r\nfunction isValid(formElement, inputElement, validationConfig) {\r\n    if(inputElement.validity.patternMismatch) {\r\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n    }\r\n    else {\r\n        inputElement.setCustomValidity(\"\");\r\n    }\r\n\r\n    if(!inputElement.validity.valid) {\r\n        showInputError(formElement, inputElement, inputElement.validationMessage, validationConfig);\r\n    }\r\n    else {\r\n        hideInputError(formElement, inputElement, validationConfig);\r\n    }\r\n}\r\n\r\nfunction hasInvalidInput(inputList) {\r\n    return inputList.some((inputElement) => {\r\n        return !inputElement.validity.valid;\r\n    });\r\n}\r\n\r\nfunction toggleButtonState(inputList, buttonElement, validationConfig) {\r\n    if (hasInvalidInput(inputList)) {\r\n        buttonElement.disabled = true;\r\n        buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n    }\r\n    else {\r\n        buttonElement.disabled = false;\r\n        buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n    }\r\n}","const config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-41',\r\n  headers: {\r\n    authorization: '9fa63082-01cd-4454-94a9-f4afe1522cf9',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\nfunction checkRes(res) {\r\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n\r\n// Запрос на личную информацию\r\nexport const getUserInfo = () => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        headers: config.headers\r\n    })\r\n        .then(checkRes);\r\n};\r\n\r\n// Запрос на карточки\r\nexport const getInitialCards = () => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        headers: config.headers\r\n    })\r\n        .then(checkRes);\r\n};\r\n\r\n// Запрос на изменение личных данных\r\nexport const editUserProfile = (name, about) => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: 'PATCH',\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            name,\r\n            about\r\n        })\r\n    })\r\n        .then(checkRes);\r\n};\r\n\r\n// Запрос на создание новой карточки\r\nexport const addNewCard = (name, link) => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: 'POST',\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            name,\r\n            link\r\n        })\r\n    })\r\n        .then(checkRes);\r\n};\r\n\r\n// Запрос на удаление карточки с сервера\r\nexport const deleteCardFromServer = (cardId) => {\r\n    return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n        method: 'DELETE',\r\n        headers: config.headers\r\n    })\r\n        .then(checkRes);\r\n};\r\n\r\n// Запрос на постановку лайка\r\nexport const putLike = (cardId) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n        method: 'PUT',\r\n        headers: config.headers\r\n    })\r\n        .then(checkRes);\r\n};\r\n\r\n// Запрос на снятие лайка\r\nexport const deleteLike = (cardId) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n        method: 'DELETE',\r\n        headers: config.headers\r\n    })\r\n        .then(checkRes);\r\n};\r\n\r\n// Запрос на смену аватара\r\nexport const changeAvatar = (avatarLink) => {\r\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n        method: 'PATCH',\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            avatar: avatarLink\r\n        })\r\n    })\r\n        .then(checkRes);\r\n}","import '../pages/index.css';\r\nimport { createCard, deleteCard } from './components/card.js';\r\nimport { openPopup, closePopup, handleOverlayClick } from './components/modal.js';\r\nimport { enableValidation, clearValidation } from './components/validation.js';\r\nimport { \r\n    getUserInfo, \r\n    getInitialCards, \r\n    editUserProfile, \r\n    addNewCard, \r\n    putLike, \r\n    deleteLike, \r\n    deleteCardFromServer,\r\n    changeAvatar \r\n} from './components/api.js';\r\n\r\nconst cardTemplate = document.querySelector('#card-template').content; // Темплейт карточки\r\nconst placesListElement = document.querySelector('.places__list'); // Список карточек\r\n\r\n// Кнопки для вызова модальных окон\r\nconst editButton = document.querySelector('.profile__edit-button');\r\nconst addButton = document.querySelector('.profile__add-button');\r\n\r\n// Модальные окна\r\nconst editModal = document.querySelector('.popup_type_edit');\r\nconst addModal = document.querySelector('.popup_type_new-card');\r\nconst imageModal = document.querySelector('.popup_type_image');\r\n\r\n// Все модальные окна\r\nconst popups = document.querySelectorAll('.popup');\r\n\r\n// Переменные окна редактирования\r\nconst editProfileForm = editModal.querySelector('.popup__form'); //форма редактирования\r\nconst nameInput = editProfileForm.querySelector('.popup__input_type_name'); \r\nconst descriptionInput = editProfileForm.querySelector('.popup__input_type_description');\r\n\r\n// Личная информация\r\nconst name = document.querySelector('.profile__title');\r\nconst job = document.querySelector('.profile__description');\r\nconst avatar = document.querySelector('.profile__image');\r\n\r\n// Переменные окна добавления карточек\r\nconst addCardForm = addModal.querySelector('.popup__form'); //форма добавления карточек\r\nconst placeNameInput = addCardForm.querySelector('.popup__input_type_card-name');\r\nconst imageLinkInput = addCardForm.querySelector('.popup__input_type_url');\r\nlet userId;\r\n\r\n// Переменные для редактирования аватара пользователя\r\nconst editAvatarButton = document.querySelector('.profile__edit-avatar');\r\nconst newAvatarModal = document.querySelector('.popup_type_new-avatar');\r\nconst newAvatarForm = newAvatarModal.querySelector('.popup__form');\r\nconst newAvatarInput = newAvatarForm.querySelector('.popup__input_type_url');\r\n\r\n// Переменные окна подтверждения удаления\r\nconst confirmModal = document.querySelector('.popup_type_confirm-delete');\r\nconst confirmForm = confirmModal.querySelector('.popup__form');\r\nlet cardToDeleteId = null;\r\nlet cardToDeleteElement = null;\r\n\r\n//Объект с настройками валидации\r\nconst validationConfig = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'popup__button_disabled',\r\n    inputErrorClass: 'popup__input_type_error',\r\n    errorClass: 'popup__error_visible'\r\n};\r\n\r\n// Функция открытия окна с изображением\r\nfunction openImageModal(image, title) {\r\n    const popupImage = imageModal.querySelector('.popup__image');\r\n    popupImage.src = image;\r\n    popupImage.alt = title;\r\n    imageModal.querySelector('.popup__caption').textContent = title;\r\n    openPopup(imageModal);\r\n}\r\n\r\n// Функция обновления личной инфорации в DOM\r\nfunction updateUserInfoOnPage(data) {\r\n    name.textContent = data.name;\r\n    job.textContent = data.about;\r\n}\r\n\r\n// Функция обработки формы редактирования личной информации\r\nfunction handleEditForm(evt) {\r\n    evt.preventDefault();\r\n\r\n    // Показываем пользователю, что началась обработка формы\r\n    const button = evt.target.querySelector('.popup__button');\r\n    renderLoading(true, button);\r\n\r\n    // Собираем новые данные с формы\r\n    const newName = nameInput.value;\r\n    const newDescription = descriptionInput.value;\r\n\r\n    // Отправляем новые данные на сервер\r\n    editUserProfile(newName, newDescription)\r\n        // Если запрос выполнен успешно\r\n        .then(data => {\r\n            // Обновляем данные на странице\r\n            updateUserInfoOnPage(data);\r\n            // И закрываем окно\r\n            closePopup(editModal);\r\n        })\r\n        .catch(err => console.log(err))\r\n        .finally(() => renderLoading(false, button));\r\n}\r\n\r\n// Функция обработки формы добавления новых карточек\r\nfunction handleFormAddCard(evt) {\r\n    evt.preventDefault();\r\n\r\n    // Показываем пользователю, что началась обработка формы\r\n    const button = evt.target.querySelector('.popup__button');\r\n    renderLoading(true, button);\r\n\r\n    // Собираем данные с формы\r\n    const name = placeNameInput.value;\r\n    const link = imageLinkInput.value;\r\n\r\n    // Отправляем новые данные на сервер\r\n    addNewCard(name, link)\r\n        // Если запрос выполнен успешно\r\n        .then(data => {\r\n            // Создаем новую карточку\r\n            const newCard = createCard(cardTemplate, data, userId, {\r\n                    onLike: onLikeApi,\r\n                    onAskDelete: handleConfirmDelete,\r\n                    onPreview: openImageModal\r\n                    });\r\n\r\n            //Добавляем карточку в начало списка\r\n            placesListElement.prepend(newCard);\r\n\r\n            //Закрываем окно\r\n            closePopup(addModal);\r\n\r\n            //Очистка полей формы\r\n            evt.target.reset();\r\n        })\r\n        .catch(err => console.log(err))\r\n        .finally(() => renderLoading(false, button));\r\n}\r\n\r\n// Функция обработки формы смены аватара\r\nfunction handleChangeAvatarForm(evt) {\r\n    evt.preventDefault();\r\n\r\n    // Показываем пользователю, что началась обработка формы\r\n    const button = evt.target.querySelector('.popup__button');\r\n    renderLoading(true, button);\r\n\r\n    // Собираем данные с формы\r\n    const avatarUrl = newAvatarInput.value;\r\n\r\n    changeAvatar(avatarUrl)\r\n        .then(data => {\r\n            avatar.style.backgroundImage = `url(${data.avatar})`;\r\n            closePopup(newAvatarModal);\r\n            newAvatarForm.reset();\r\n        })\r\n        .catch(err => console.log(err))\r\n        .finally(() => renderLoading(false, button));\r\n}\r\n\r\n// Функция для обработки формы подтверждения удаления\r\nfunction submitConfirmForm(evt) {\r\n    evt.preventDefault();\r\n\r\n    // Показываем пользователю, что началась обработка формы\r\n    const button = evt.target.querySelector('.popup__button');\r\n    renderLoading(true, button, 'Да', 'Удаление...');\r\n\r\n    deleteCard(cardToDeleteId, cardToDeleteElement, onDeleteApi)\r\n        .then(() => closePopup(confirmModal))\r\n        .catch(err => console.log(err))\r\n        .finally(() => {\r\n            renderLoading(false, button, 'Да');\r\n            cardToDeleteId = null;\r\n            cardToDeleteElement = null;\r\n        });\r\n}\r\n\r\n// Колбэк для лайка\r\nfunction onLikeApi(cardId, isLiked) {\r\n    const request = isLiked ? deleteLike(cardId) : putLike(cardId);\r\n    return request; // Вернет промис с новым объектом карточки\r\n}\r\n\r\n// Колбэк для удаления карточки\r\nfunction onDeleteApi(cardId) {\r\n    return deleteCardFromServer(cardId);\r\n}\r\n\r\n// Функция, которая покажет пользователю процесс загрузки\r\nfunction renderLoading(isLoading, button, defaultText = 'Сохранить', loadingText = 'Сохранение...') {\r\n    if (isLoading) {\r\n        button.textContent = loadingText;\r\n        button.disabled = true;\r\n    } \r\n    else {\r\n        button.textContent = defaultText;\r\n        button.disabled = false;\r\n    }\r\n}\r\n\r\n// Функция открытия окна подтверждения удаления\r\nfunction handleConfirmDelete(cardId, cardElement) {\r\n    // Запоминаем, какую карточку надо удалить\r\n    cardToDeleteId = cardId;\r\n    cardToDeleteElement = cardElement;\r\n    // Открываем модалку подтверждения\r\n    openPopup(confirmModal);\r\n}\r\n\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n    .then(([userData, cards]) => {\r\n        // Сохраняем userID\r\n        userId = userData._id;\r\n\r\n        // Вставляем на страницу имя, описание и аватар\r\n        name.textContent = userData.name;\r\n        job.textContent = userData.about;\r\n        avatar.style.backgroundImage = `url(${userData.avatar})`;\r\n        \r\n        // Вывести карточки на страницу\r\n        cards.forEach(cardData => {\r\n            placesListElement.append(\r\n                createCard(cardTemplate, cardData, userId, {\r\n                    onLike: onLikeApi,\r\n                    onAskDelete: handleConfirmDelete,\r\n                    onPreview: openImageModal\r\n                })\r\n            );    \r\n        });\r\n    })\r\n    .catch(err => console.log(err));\r\n\r\n// Для всех модальных окон добавим плавную анимацию\r\ndocument.querySelectorAll('.popup').forEach((popup) => {popup.classList.add('popup_is-animated');});\r\n\r\n//Добавим обработчики для закрытия\r\npopups.forEach((popup) => {\r\n    //По крестику\r\n    const closeButton = popup.querySelector('.popup__close');\r\n    closeButton.addEventListener('click', () => {\r\n        closePopup(popup);\r\n\r\n        // Очищаем форму, если это попап добавления карточки\r\n        if (popup.classList.contains('popup_type_new-card')) {\r\n            addCardForm.reset();\r\n        }\r\n    });\r\n\r\n    //По оверлею\r\n    popup.addEventListener('mousedown', (evt) => {\r\n        handleOverlayClick(evt);\r\n\r\n        // Очищаем форму, если это попап добавления карточки\r\n        if (popup.classList.contains('popup_type_new-card') && !popup.classList.contains('popup_is-opened')) {\r\n            addCardForm.reset();\r\n        }\r\n    });\r\n});\r\n\r\n// Клик по кнопке редактирования личной информации\r\neditButton.addEventListener('click', () => {\r\n    nameInput.value = name.textContent;\r\n    descriptionInput.value = job.textContent;\r\n\r\n    // Очистка ошибок валидации\r\n    clearValidation(editProfileForm, validationConfig);\r\n    // Открытие модалки\r\n    openPopup(editModal); \r\n});\r\n\r\n// Клик по кнопке добавления карточки\r\naddButton.addEventListener('click', () => {\r\n    // Очистка ошибок валидации\r\n    clearValidation(addCardForm, validationConfig);\r\n    // Открытие модалки\r\n    openPopup(addModal); \r\n});\r\n\r\n// Клик по аватару\r\neditAvatarButton.addEventListener('click', () => {\r\n    clearValidation(newAvatarForm, validationConfig);\r\n    openPopup(newAvatarModal);\r\n});\r\n\r\n// Обработка формы редактирования личной информации\r\neditProfileForm.addEventListener('submit', (evt) => {\r\n    handleEditForm(evt);\r\n}); \r\n\r\n// Обработка формы добавления карточек\r\naddCardForm.addEventListener('submit', (evt) => {\r\n    handleFormAddCard(evt);\r\n}); \r\n\r\n// Обработка формы смены аватара\r\nnewAvatarForm.addEventListener('submit', (evt) => {\r\n    handleChangeAvatarForm(evt);\r\n});\r\n\r\n// Обработка формы подтверждения удаления\r\nconfirmForm.addEventListener('submit', (evt) => {\r\n    submitConfirmForm(evt);\r\n});\r\n\r\n// Включение валидации форм\r\nenableValidation(validationConfig);\r\n\r\n"],"names":["createCard","cardTemplate","cardData","userId","handlers","cardElement","querySelector","cloneNode","cardImage","buttonLike","likeCounter","deleteButton","cardTitle","src","link","alt","name","textContent","likes","length","some","user","_id","classList","add","owner","remove","addEventListener","cardId","onLike","contains","then","newCard","toggle","catch","err","console","log","handleLikeButton","onAskDelete","onPreview","openPopup","modal","document","handleEscClose","closePopup","popup","removeEventListener","evt","key","openedPopup","clearValidation","formElement","validationConfig","inputList","Array","from","querySelectorAll","inputSelector","buttonElement","submitButtonSelector","forEach","inputElement","setCustomValidity","hideInputError","toggleButtonState","errorElement","concat","id","inputErrorClass","errorClass","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","config","baseUrl","headers","authorization","checkRes","res","ok","json","Promise","reject","status","content","placesListElement","editButton","addButton","editModal","addModal","imageModal","popups","editProfileForm","nameInput","descriptionInput","job","avatar","addCardForm","placeNameInput","imageLinkInput","editAvatarButton","newAvatarModal","newAvatarForm","newAvatarInput","confirmModal","confirmForm","cardToDeleteId","cardToDeleteElement","formSelector","openImageModal","image","title","popupImage","onLikeApi","isLiked","request","fetch","method","deleteLike","putLike","onDeleteApi","deleteCardFromServer","renderLoading","isLoading","button","defaultText","arguments","undefined","loadingText","handleConfirmDelete","all","_ref","_ref2","userData","cards","about","style","backgroundImage","append","reset","target","closest","currentTarget","handleOverlayClick","value","preventDefault","body","JSON","stringify","data","updateUserInfoOnPage","finally","handleEditForm","prepend","handleFormAddCard","avatarLink","handleChangeAvatarForm","onDelete","submitConfirmForm","patternMismatch","dataset","errorMessage","showInputError","validationMessage","isValid","setEventLicteners","enableValidation"],"sourceRoot":""}